openapi: "3.0.2"
info:
  title: Devitch
  version: "1.0"
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /users:
    get:
      tags:
        - ユーザー関連
      summary: 自分のアカウントの情報を取得
      description: Returns an array of User model
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A JSON array of User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
                example:
                  - id: 1
                    name: "user1"
                    links: ["https://github.com"]
                    followers: []
    post: #トークンを返す
      tags:
        - ユーザー関連
      summary: 新規ユーザー作成
      description: Create a new user with the given User model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              userid: 1
              username: "user1"
              githubid: "github1"
              googleid: "google1"
      responses:
        "200":
          description: A JSON object of User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                userid: 1
                username: "user1"
                githubid: "github1"
                googleid: "google1"
    patch:
      tags:
        - ユーザー関連
      summary: 自分のアカウントの情報を更新
      description: Update a user with the given User model
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              username: "user2"
              githubid: "github2"
              googleid: "google2"
      responses:
        "200":
          description: A JSON object of User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                userid: 1
                username: "user2"
                githubid: "github2"
                googleid: "google2"
    delete:
      tags:
        - ユーザー関連
      summary: 自分のアカウントを削除
      description: Delete your account.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A JSON object of User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example: User deleted
  /users/{userid}:
    get:
      tags:
        - ユーザー関連
      summary: 他のユーザーの情報を取得
      description: Returns a user profile.
      parameters:
        - name: userid
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A JSON object of follow list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                - userid: 1
                  username: "user1"
                - userid: 2
                  username: "user2"
    post:
      tags:
        - ユーザー関連
      summary: ユーザーをフォロー
      description: Follow a user with the given userid
      security:
        - BearerAuth: []
      parameters:
        - name: userid
          in: path
          description: ID of user to follow
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A JSON object of User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                userid: 1
                username: "user1"
    delete:
      tags:
        - ユーザー関連
      summary: ユーザーのフォローを解除
      description: Unfollow a user with the given userid
      security:
        - BearerAuth: []
      parameters:
        - name: userid
          in: path
          description: ID of user to unfollow
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A JSON object of User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example: User unfollowed
  /streams:
    get:
      tags:
        - 配信関連
      summary: 検索条件に合致する配信を取得
      description: Returns an stream list.
      parameters:
        - name: genre
          in: query
          description: Genre of stream to return
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A JSON array of Stream model
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Stream"
                example:
                  - streamid: 1
                    title: "stream1"
                    genre: ["genre1", "genre2"]
                  - streamid: 2
                    title: "stream2"
                    genre: ["genre1", "genre2"]
    post:
      tags:
        - 配信関連
      summary: 新しく配信を開始
      description: Create a new stream with the given Stream model
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stream"
            example:
              streamid: 1
              title: "stream1"
              genre: ["genre1", "genre2"]
      responses:
        "200":
          description: A JSON object of Stream model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
              example:
                streamid: 1
                title: "stream1"
                genre: ["genre1", "genre2"]
                comments: []
                listeners: [{}]
  /streams/{streamid}:
    get:
      tags:
        - 配信関連
      summary: IDを指定して配信を取得
      description: Returns a stream with the given streamid
      parameters:
        - name: streamid
          in: path
          description: ID of stream to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A JSON object of Stream model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
              example:
                streamid: 1
                title: "stream1"
                genre: ["genre1", "genre2"]
                comments: []
                listeners: [{}]
    patch:
      tags:
        - 配信関連
      summary: 配信の情報を更新
      description: Update a stream with the given Stream model
      security:
        - BearerAuth: []
      parameters:
        - name: streamid
          in: path
          description: ID of stream to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stream"
            example:
              title: "stream1"
              genre: ["genre1", "genre2"]
      responses:
        "200":
          description: A JSON object of Stream model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
              example:
                streamid: 1
                title: "stream2"
                genre: ["genre3"]
    delete:
      tags:
        - 配信関連
      summary: 配信を終了
      description: Delete a stream with the given streamid
      security:
        - BearerAuth: []
      parameters:
        - name: streamid
          in: path
          description: ID of stream to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A JSON object of Stream model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
              example: Stream deleted
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        links:
          type: array
          items:
            type: string
        followers: #本当はUserの配列を入れたいが、循環参照になってしまう
          type: array
          items:
            type: integer
            format: int64
    Stream:
      type: object
      required:
        - streamid
        - title
      properties:
        streamid:
          type: integer
          format: int64
        title:
          type: string
        genre:
          type: array
          items:
            type: integer
            format: int64
        comments:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
              message:
                type: string
              sendAt:
                type: string
        commentLength:
          type: integer
        listeners:
          type: array
          items:
            $ref: "#/components/schemas/User"
        listenerLength:
          type: integer
