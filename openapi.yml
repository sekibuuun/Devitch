openapi: "3.0.2"
info:
  title: Devitch
  version: "1.0"
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /users:
    get:
      tags:
        - users
      summary: Get your info.
      description: Returns an array of User model
      parameters: []
      responses:
        "200":
          description: A JSON array of User model
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                example:
                  - userid: 1
                    username: "user1"
                    githubid: "github1"
                    googleid: "google1"
    post:
      tags:
        - users
      summary: Create a new user.
      description: Create a new user with the given User model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              userid: 1
              username: "user1"
              githubid: "github1"
              googleid: "google1"
      responses:
        "200":
          description: A JSON object of User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                userid: 1
                username: "user1"
                githubid: "github1"
                googleid: "google1"
    patch:
      tags:
        - users
      summary: Update your info.
      description: Update a user with the given User model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              username: "user1"
              githubid: "github1"
              googleid: "google1"
      responses:
        "200":
          description: A JSON object of User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                userid: 1
                username: "user1"
                githubid: "github1"
                googleid: "google1"
    delete:
      tags:
        - users
      summary: Delete a user.
      description: Delete  your account.
      responses:
        "200":
          description: A JSON object of User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example: User deleted
  /users/{userid}:
    get:
      tags:
        - users/{userid}
      summary: Get users.
      description: Returns a follow list
      parameters:
        - name: userid
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A JSON object of follow list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                - userid: 1
                  username: "user1"
                  githubid: "github1"
                  googleid: "google1"
                - userid: 2
                  username: "user2"
                  githubid: "github2"
                  googleid: "google2"
    post:
      tags:
        - users/{userid}
      summary: Follow a user.
      description: Follow a user with the given userid
      parameters:
        - name: userid
          in: path
          description: ID of user to follow
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A JSON object of User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                userid: 1
                username: "user1"
                githubid: "github1"
                googleid: "google1"
    delete:
      tags:
        - users/{userid}
      summary: Unfollow a user.
      description: Unfollow a user with the given userid
      parameters:
        - name: userid
          in: path
          description: ID of user to unfollow
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A JSON object of User model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example: User unfollowed
  /streams:
    get:
      tags:
        - streams
      summary: Get all streams.
      description: Returns an stream list.
      responses:
        "200":
          description: A JSON array of Stream model
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseStream"
                example:
                  - streamid: 1
                    title: "stream1"
                    genre: ["genre1", "genre2"]
                  - streamid: 2
                    title: "stream2"
                    genre: ["genre1", "genre2"]
    post:
      tags:
        - streams
      summary: Create a new stream.
      description: Create a new stream with the given Stream model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseStream"
            example:
              streamid: 1
              title: "stream1"
              genre: ["genre1", "genre2"]
      responses:
        "200":
          description: A JSON object of Stream model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
              example:
                streamid: 1
                title: "stream1"
                genre: ["genre1", "genre2"]
                comments: []
                listeners: [{}]
  /streams/{streamid}:
    get:
      tags:
        - streams/{streamid}
      summary: Get a stream.
      description: Returns a stream with the given streamid
      parameters:
        - name: streamid
          in: path
          description: ID of stream to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A JSON object of Stream model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
              example:
                streamid: 1
                title: "stream1"
                genre: ["genre1", "genre2"]
                comments: []
                listeners: [{}]
    patch:
      tags:
        - streams/{streamid}
      summary: Update a stream.
      description: Update a stream with the given Stream model
      parameters:
        - name: streamid
          in: path
          description: ID of stream to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseStream"
            example:
              title: "stream1"
              genre: ["genre1", "genre2"]
      responses:
        "200":
          description: A JSON object of Stream model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseStream"
              example:
                streamid: 1
                title: "stream2"
                genre: ["genre3"]
    delete:
      tags:
        - streams/{streamid}
      summary: Delete a stream.
      description: Delete a stream with the given streamid
      parameters:
        - name: streamid
          in: path
          description: ID of stream to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A JSON object of Stream model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
              example: Stream deleted
components:
  schemas:
    User:
      type: object
      required:
        - userid
        - username
      properties:
        userid:
          type: integer
          format: int64
        username:
          type: string
        githubid:
          type: string
        googleid:
          type: string
    BaseStream:
      type: object
      required:
        - streamid
        - title
      properties:
        streamid:
          type: integer
          format: int64
        title:
          type: string
        genre:
          type: array
          items:
            type: string
    Stream:
      allOf:
        - $ref: "#/components/schemas/BaseStream"
        - type: object
          properties:
            comments:
              type: array
              items:
                type: string
            listeners:
              type: array
              items:
                $ref: "#/components/schemas/User"
